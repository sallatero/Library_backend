{"version":3,"sources":["graphql/mutations/updateAuthorBorn.js","graphql/queries/allAuthors.js","components/UpdateAuthorForm.js","components/Authors.js","components/Books.js","components/NewBook.js","components/LoginForm.js","components/Recommendations.js","graphql/fragments/bookDetails.js","graphql/subscriptions/bookAdded.js","graphql/mutations/createBook.js","graphql/mutations/login.js","graphql/queries/allBooks.js","App.js","index.js"],"names":["UPDATE_AUTHOR_BORN","gql","_templateObject","ALL_AUTHORS","allAuthors_templateObject","UpdateAuthorForm","props","_useState","useState","_useState2","Object","slicedToArray","born","setBorn","_useState3","_useState4","selectedOption","setSelectedOption","result","loading","react_default","a","createElement","Loader","active","inline","console","log","data","authors","allAuthors","options","map","value","id","toString","label","name","submit","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","int","aut","wrap","_context","prev","next","preventDefault","parseInt","find","bookCount","updateBirthYear","variables","setBornTo","t0","handleError","stop","this","_x","apply","arguments","Header","size","color","Form","onSubmit","FormField","fluid","react_select_esm","onChange","type","placeholder","_ref2","target","Button","Authors","show","useMutation","refetchQueries","query","Container","text","Segment","Group","padded","token","stacked","components_UpdateAuthorForm","Table","compact","Row","HeaderCell","Body","key","Cell","ALL_BOOKS","Books_templateObject","ALL_GENRES","_templateObject2","Books","selectedGenre","setselectedGenre","genres","setGenres","_useState5","_useState6","books","setBooks","client","useApolloClient","useEffect","fetchPolicy","sent","allGenres","fetchGenres","_ref3","_callee2","_ref4","_context2","genre","allBooks","fetchBooks","renderGenre","Label","as","onClick","_","capitalize","className","g","b","title","author","published","NewBook","setTitle","setAuthor","setPublished","_useState7","_useState8","setGenre","_useState9","_useState10","publInt","message","abrupt","addBook","setPage","_ref5","newGenres","concat","toConsumableArray","newArray","filter","removeGenre","Icon","LoginForm","username","setUsername","password","setpassword","event","login","setToken","localStorage","setItem","Recommendations_templateObject","USER","Recommendations_templateObject2","Recommendations","user","setUser","_fetchUser","me","fetchUser","_fetchBooks","favoriteGenre","BOOK_DETAILS","bookDetails_templateObject","BOOK_ADDED","bookAdded_templateObject","CREATE_BOOK","createBook_templateObject","LOGIN","login_templateObject","allBooks_templateObject","ErrorNotification","style","App","page","errorMessage","setErrorMessage","loggedUser","window","getItem","error","includes","logout","setTimeout","clear","resetStore","includedIn","set","object","length","setIds","p","bool","update","store","response","dataInStore","readQuery","addedBook","push","writeQuery","useQuery","react_apollo_esm","subscription","onSubscriptionData","subscriptionData","bookAdded","alert","boooksInStore","newSet","authorsInStore","temp","objectSpread","Menu","secondary","Item","position","App_ErrorNotification","components_Authors","components_Books","components_NewBook","components_Recommendations","components_LoginForm","wsLink","WebSocketLink","uri","reconnect","httpLink","createHttpLink","authLink","setContext","headers","authorization","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloContext","src_App","document","getElementById"],"mappings":"ilBAEA,IAeiBA,EAfUC,YAAHC,mKCAxB,IAWeC,EAXKF,YAAHG,mFCsEFC,EApEU,SAACC,GAAU,IAAAC,EACVC,mBAAS,IADCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3BK,EAD2BH,EAAA,GACrBI,EADqBJ,EAAA,GAAAK,EAEUN,mBAAS,MAFnBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE3BE,EAF2BD,EAAA,GAEXE,EAFWF,EAAA,GAIlC,GAAIT,EAAMY,OAAOC,QACf,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,aAG1BC,QAAQC,IAAI,eAAgBrB,EAAMY,OAAOU,MAEzC,IAAMC,EAAUvB,EAAMY,OAAOU,KAAKE,WAC5BC,EAAUF,EAAQG,IAAI,SAAAX,GAC1B,MAAO,CACNY,MAAOZ,EAAEa,GAAGC,WAAYC,MAAOf,EAAEgB,QAI9BC,EAAM,eAAAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAApB,EAAAqB,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAL,EAAApB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbN,EAAEO,iBACFzB,QAAQC,IAAI,mBACNkB,EAAMO,SAASxC,GACrBc,QAAQC,IAAI,aAAckB,EAAK,aAAc7B,GACvC8B,EAAMjB,EAAQwB,KAAK,SAAAhC,GACvB,OAAOA,EAAEa,KAAOlB,EAAeiB,QAEjCP,QAAQC,IAAI,kBAAmBmB,EAAIQ,WARtBN,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAUL5C,EAAMiD,gBAAgB,CAC1BC,UAAW,CAAEtB,GAAIlB,EAAeiB,MAAOwB,UAAWZ,EAAKS,UAAWR,EAAIQ,aAX7D,OAaXrC,EAAkB,MAClBJ,EAAQ,IAdGmC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAgBXtB,QAAQC,IAARqB,EAAAU,IACApD,EAAMqD,YAANX,EAAAU,IAjBW,yBAAAV,EAAAY,SAAAjB,EAAAkB,KAAA,aAAH,gBAAAC,GAAA,OAAAvB,EAAAwB,MAAAF,KAAAG,YAAA,GAqBZ,OAAI1D,EAAMY,OAAOC,QAEbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,aAKxBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,SAASC,MAAM,QAA5B,kBACA/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAMC,SAAU/B,GACdlB,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CACEvC,MAAOjB,EACPyD,SAAU,SAACzD,GAAD,OAAoBC,EAAkBD,IAChDe,QAASA,KAGbX,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAOoD,KAAK,SAASzC,MAAOrB,EAAM+D,YAAY,oBAC5CF,SAAU,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAAgBhE,EAAQgE,EAAO5C,WAE7Cb,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQP,OAAK,EAACJ,MAAM,OAAOO,KAAK,UAAhC,wCCAOK,EA3DC,SAACzE,GAGf,GAFAoB,QAAQC,IAAI,kBAAmBrB,IAE1BA,EAAM0E,KACT,OAAO,KAGT,GAAI1E,EAAMY,OAAOC,QACf,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,aAI1B,IAAM8B,EAAkB0B,YAAYjF,EAAoB,CACtDkF,eAAgB,CAAC,CAAEC,MAAOhF,MAGtB0B,EAAUvB,EAAMY,OAAOU,KAAKE,WAClC,OACEV,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAWC,MAAI,GACbjE,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,QAA3B,YAEF/C,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACGjF,EAAMmF,MACLrE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,EAACE,SAAO,GACrBtE,EAAAC,EAAAC,cAACqE,EAAD,CAAkBzE,OAAQZ,EAAMY,OAAQqC,gBAAiBA,EACvDI,YAAarD,EAAMqD,eAGvBvC,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOzB,MAAM,OAAO0B,SAAO,GACzBzE,EAAAC,EAAAC,cAACsE,EAAA,EAAM3B,OAAP,KACE7C,EAAAC,EAAAC,cAACsE,EAAA,EAAME,IAAP,KACE1E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,aACA3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,aACA3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,uBAGJ3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMI,KAAP,KACGnE,EAAQG,IAAI,SAAAX,GAAC,OACZD,EAAAC,EAAAC,cAACsE,EAAA,EAAME,IAAP,CAAWG,IAAK5E,EAAEgB,MAChBjB,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAa7E,EAAEgB,MACfjB,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAa7E,EAAET,MACfQ,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAa7E,EAAEiC,mgBC/CnC,IAAM6C,EAAYlG,YAAHmG,KAgBTC,EAAapG,YAAHqG,KAoIDC,EA9HD,SAACjG,GAAU,IAAAC,EACmBC,mBAAS,IAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBiG,EADgB/F,EAAA,GACDgG,EADChG,EAAA,GAAAK,EAEKN,mBAAS,IAFdO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEhB4F,EAFgB3F,EAAA,GAER4F,EAFQ5F,EAAA,GAAA6F,EAGGpG,mBAAS,IAHZqG,EAAAnG,OAAAC,EAAA,EAAAD,CAAAkG,EAAA,GAGhBE,EAHgBD,EAAA,GAGTE,EAHSF,EAAA,GAIjBG,EAASC,cAmCf,GAjCAvF,QAAQC,IAAI,gBAAiBrB,GAG7B4G,oBAAU,WACRxF,QAAQC,IAAI,+BACK,eAAAY,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAApB,EAAAqB,KAAG,SAAAC,IAAA,IAAAiC,EAAAhD,EAAA,OAAAa,EAAApB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAClBxB,QAAQC,IAAI,mDADMqB,EAAAE,KAAA,EAEK8D,EAAO7B,MAAM,CAClCA,MAAOkB,EACPc,YAAa,iBAJG,OAAAvC,EAAA5B,EAAAoE,KAEVxF,EAFUgD,EAEVhD,KAIRF,QAAQC,IAAI,mCACZgF,EAAU/E,EAAKyF,WAPG,wBAAArE,EAAAY,SAAAjB,EAAAkB,SAAH,yBAAAtB,EAAAwB,MAAAF,KAAAG,YAAA,EASjBsD,IACC,CAACR,IAGJI,oBAAU,WACRxF,QAAQC,IAAI,gCACI,eAAA4F,EAAA7G,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAApB,EAAAqB,KAAG,SAAA8E,IAAA,IAAAC,EAAA7F,EAAA,OAAAa,EAAApB,EAAA0B,KAAA,SAAA2E,GAAA,cAAAA,EAAAzE,KAAAyE,EAAAxE,MAAA,cACjBxB,QAAQC,IAAI,iDAAkD6E,GAD7CkB,EAAAxE,KAAA,EAEM8D,EAAO7B,MAAM,CAClCA,MAAOgB,EACP3C,UAAW,CAAEmE,MAAOnB,GACpBW,YAAa,iBALE,OAAAM,EAAAC,EAAAN,KAETxF,EAFS6F,EAET7F,KAKRF,QAAQC,IAAI,kCACZoF,EAASnF,EAAKgG,UARG,wBAAAF,EAAA9D,SAAA4D,EAAA3D,SAAH,yBAAA0D,EAAAxD,MAAAF,KAAAG,YAAA,EAUhB6D,IACC,CAACrB,EAAelG,EAAM0E,QAEpB1E,EAAM0E,KACT,OAAO,KAGT,IAAM8C,EAAc,SAACH,GACnB,IAAIxD,EAAQ,GAIZ,OAHIqC,IAAkBmB,IACpBxD,EAAQ,QAGR/C,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAO9B,IAAK0B,EAAOK,GAAG,IAAI7D,MAAOA,EAAO0B,QAAQ,OAAO3B,KAAK,QAC1D+D,QAAS,kBAAMxB,EAAiBkB,KACrB,KAAVA,EACG,WACAO,IAAEC,WAAWR,KAqCvB,OACEvG,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAWC,MAAI,GACbjE,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,QAA3B,UAEF/C,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,EAAC4C,UAAU,4BAzB9BhH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,SAASC,MAAM,QAZ5B/C,EAAAC,EAAAC,cAAA,WACqB,KAAlBkF,EACC,kBACApF,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,SAAIkF,MAY3BE,IAAW,GACVtF,EAAAC,EAAAC,cAAA,OAAK8G,UAAU,iBACbhH,EAAAC,EAAAC,cAACyG,EAAA,EAAMxC,MAAP,KACGuC,EAAY,KAEf1G,EAAAC,EAAAC,cAACyG,EAAA,EAAMxC,MAAP,KACGmB,EAAO1E,IAAI,SAAAqG,GAAC,OAAIP,EAAYO,OAGjCjH,EAAAC,EAAAC,cAAA,cAeEF,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOzB,MAAM,OAAO0B,SAAO,GACzBzE,EAAAC,EAAAC,cAACsE,EAAA,EAAM3B,OAAP,KACE7C,EAAAC,EAAAC,cAACsE,EAAA,EAAME,IAAP,KACE1E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,cACA3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,eACA3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,oBAGJ3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMI,KAAP,KACGc,EAAM9E,IAAI,SAAAsG,GAAC,OACVlH,EAAAC,EAAAC,cAACsE,EAAA,EAAME,IAAP,CAAWG,IAAKqC,EAAEpG,IAChBd,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAaoC,EAAEC,OACfnH,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAaoC,EAAEE,OAAOnG,MACtBjB,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAaoC,EAAEG,sCCrBpBC,EArHC,SAACpI,GAAU,IAAAC,EACCC,mBAAS,IADVC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBgI,EADkB9H,EAAA,GACXkI,EADWlI,EAAA,GAAAK,EAEGN,mBAAS,IAFZO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAElB0H,EAFkBzH,EAAA,GAEV6H,EAFU7H,EAAA,GAAA6F,EAGSpG,mBAAS,IAHlBqG,EAAAnG,OAAAC,EAAA,EAAAD,CAAAkG,EAAA,GAGlB6B,EAHkB5B,EAAA,GAGPgC,EAHOhC,EAAA,GAAAiC,EAICtI,mBAAS,IAJVuI,EAAArI,OAAAC,EAAA,EAAAD,CAAAoI,EAAA,GAIlBnB,EAJkBoB,EAAA,GAIXC,EAJWD,EAAA,GAAAE,EAKGzI,mBAAS,IALZ0I,EAAAxI,OAAAC,EAAA,EAAAD,CAAAuI,EAAA,GAKlBvC,EALkBwC,EAAA,GAKVvC,EALUuC,EAAA,GAOzB,IAAK5I,EAAM0E,KACT,OAAO,KAGT,IAAM1C,EAAM,eAAAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAApB,EAAAqB,KAAG,SAAAC,EAAOC,GAAP,IAAAuG,EAAA,OAAA1G,EAAApB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACbN,EAAEO,iBACFzB,QAAQC,IAAI,eACZD,QAAQC,IAAI4G,EAAOE,EAAWD,EAAQ9B,GAEjC6B,EALQ,CAAAvF,EAAAE,KAAA,eAMX5C,EAAMqD,YAAY,CAAEyF,QAAS,2BANlBpG,EAAAqG,OAAA,oBASRb,EATQ,CAAAxF,EAAAE,KAAA,eAUX5C,EAAMqD,YAAY,CAAEyF,QAAS,6BAVlBpG,EAAAqG,OAAA,oBAaRZ,EAbQ,CAAAzF,EAAAE,KAAA,gBAcX5C,EAAMqD,YAAY,CAAEyF,QAAS,qCAdlBpG,EAAAqG,OAAA,yBAkBPF,EAAU/F,SAASqF,GACzB/G,QAAQC,IAAI,SAAUwH,GAnBTnG,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAqBL5C,EAAMgJ,QAAQ,CAClB9F,UAAW,CAAE+E,MAAOA,EAAOE,UAAWU,EACpCX,OAAQA,EAAQ9B,OAAQA,KAvBjB,QAAA1D,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,UA0BXtB,QAAQC,IAARqB,EAAAU,IACApD,EAAMqD,YAANX,EAAAU,IA3BW,QA6BbiF,EAAS,IACTE,EAAa,IACbD,EAAU,IACVjC,EAAU,IACVqC,EAAS,IACTtH,QAAQC,IAAI,gBACZrB,EAAMiJ,UAnCO,yBAAAvG,EAAAY,SAAAjB,EAAAkB,KAAA,cAAH,gBAAAC,GAAA,OAAAvB,EAAAwB,MAAAF,KAAAG,YAAA,GAqDZ,OACE5C,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAWC,MAAI,GACbjE,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,QAA3B,sBAEF/C,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,EAACE,SAAO,GACrBtE,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAMC,SAAU/B,GACdlB,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOoD,KAAK,OAAOzC,MAAOsG,EAAO5D,YAAY,gBAC3CF,SAAU,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAAgB8D,EAAS9D,EAAO5C,WAE9Cb,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAOoD,KAAK,OAAOzC,MAAOuG,EAAQ7D,YAAY,iBAC5CF,SAAU,SAAA8C,GAAA,IAAG1C,EAAH0C,EAAG1C,OAAH,OAAgB+D,EAAU/D,EAAO5C,WAE/Cb,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOoD,KAAK,SAASzC,MAAOwG,EAAW9D,YAAY,0BACjDF,SAAU,SAAAgD,GAAA,IAAG5C,EAAH4C,EAAG5C,OAAH,OAAgBgE,EAAahE,EAAO5C,WAElDb,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAC8C,EAAA,EAAKmB,MAAN,CAAY9D,QAAM,GAChBL,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,SAAOoD,KAAK,OAAOzC,MAAO0F,EAAOhD,YAAY,gBAC3CF,SAAU,SAAA+E,GAAA,IAAG3E,EAAH2E,EAAG3E,OAAH,OAAgBmE,EAASnE,EAAO5C,WAE9Cb,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQmD,QA9CP,WACf,IAAMwB,EAAY/C,EAAOgD,OAAO/B,GAChCjG,QAAQC,IAAI,cAAe8H,GAC3B9C,EAAUjG,OAAAiJ,EAAA,EAAAjJ,CAAI+I,IACdT,EAAS,KA0CgC9E,KAAK,QAAQQ,KAAK,UAA7C,cAEFtD,EAAAC,EAAAC,cAACyG,EAAA,EAAMxC,MAAP,CAAapB,MAAM,QACjB/C,EAAAC,EAAAC,cAAA,OAAK8G,UAAU,iBACZ1B,EAAO1E,IAAI,SAAAqG,GAAC,OACXjH,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAO9B,IAAKoC,EAAGL,GAAG,IAAIC,QAAS,kBA5C/B,SAACN,GACnBjG,QAAQC,IAAI,kBAAmBgG,GAC/B,IAAMiC,EAAWlD,EAAOmD,OAAO,SAAAxB,GAAC,OAAIA,IAAMV,IAC1ChB,EAAUiD,GACVZ,EAAS,IACTtH,QAAQC,IAAI,wBAAyBiI,GAuCkBE,CAAYzB,IAAInE,KAAK,SACvDgE,IAAEC,WAAWE,GACdjH,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAM1H,KAAK,gBAMrBjB,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQP,OAAK,EAACJ,MAAM,OAAOO,KAAK,UAAhC,gBC1DCsF,EApDG,SAAC1J,GAAU,IAAAC,EACKC,mBAAS,IADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpB0J,EADoBxJ,EAAA,GACVyJ,EADUzJ,EAAA,GAAAK,EAEKN,mBAAS,IAFdO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEpBqJ,EAFoBpJ,EAAA,GAEVqJ,EAFUrJ,EAAA,GAI3B,IAAKT,EAAM0E,KACT,OAAO,KAGT,IAAM1C,EAAM,eAAAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAApB,EAAAqB,KAAG,SAAAC,EAAO0H,GAAP,IAAAnJ,EAAAuE,EAAA,OAAAhD,EAAApB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbmH,EAAMlH,iBADOH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGU5C,EAAMgK,MAAM,CAC/B9G,UAAW,CAAEyG,WAAUE,cAJd,OAGLjJ,EAHK8B,EAAAoE,KAML3B,EAAQvE,EAAOU,KAAK0I,MAAMrI,MAEhC3B,EAAMiK,SAAS9E,GACf+E,aAAaC,QAAQ,qBAAsBhF,GAC3CnF,EAAMiJ,UAVKvG,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAYX1C,EAAMqD,YAANX,EAAAU,IAZW,yBAAAV,EAAAY,SAAAjB,EAAAkB,KAAA,aAAH,gBAAAC,GAAA,OAAAvB,EAAAwB,MAAAF,KAAAG,YAAA,GAgBZ,OACE5C,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAWC,MAAI,GACbjE,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,QAA3B,eAEF/C,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,EAACE,SAAO,GACrBtE,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAMC,SAAU/B,GACdlB,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOoD,KAAK,OAAOzC,MAAOgI,EAAUtF,YAAY,gBAC9CF,SAAU,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAAgBqF,EAAYrF,EAAO5C,WAEjDb,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,MAAM,QACfnD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOoD,KAAK,WAAWzC,MAAOkI,EAAUxF,YAAY,gBAClDF,SAAU,SAAA8C,GAAA,IAAG1C,EAAH0C,EAAG1C,OAAH,OAAgBuF,EAAYvF,EAAO5C,WAEjDb,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQP,OAAK,EAACJ,MAAM,OAAOO,KAAK,UAAhC,0eCzCd,IAAMyB,EAAYlG,YAAHyK,KAgBTC,EAAO1K,YAAH2K,KAmFKC,EA1ES,SAACvK,GAAU,IAAAC,EACPC,mBAAS,IADFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1BuG,EAD0BrG,EAAA,GACnBsG,EADmBtG,EAAA,GAE3BuG,EAASC,cAFkBnG,EAGTN,mBAAS,MAHAO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG1BgK,EAH0B/J,EAAA,GAGpBgK,EAHoBhK,EAAA,GAoCjC,OA/BAmG,oBAAU,WAAM,SAAA8D,IAAA,OAAAA,EAAAtK,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAApB,EAAAqB,KAEd,SAAAC,IAAA,IAAAJ,EAAAX,EAAA,OAAAa,EAAApB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACExB,QAAQC,IAAI,8CADdqB,EAAAE,KAAA,EAEyB8D,EAAO7B,MAAM,CAClCA,MAAOwF,IAHX,OAAApI,EAAAS,EAAAoE,KAEUxF,EAFVW,EAEUX,KAGRF,QAAQC,IAAI,wCACZoJ,EAAQnJ,EAAKqJ,IANf,wBAAAjI,EAAAY,SAAAjB,EAAAkB,UAFcE,MAAAF,KAAAG,WACdtC,QAAQC,IAAI,sCADE,WAAAqJ,EAAAjH,MAAAF,KAAAG,WAUdkH,IACC,IAEHhE,oBAAU,WAAM,SAAAiE,IAAA,OAAAA,EAAAzK,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAApB,EAAAqB,KAEd,SAAA8E,IAAA,IAAA5C,EAAAhD,EAAA,OAAAa,EAAApB,EAAA0B,KAAA,SAAA2E,GAAA,cAAAA,EAAAzE,KAAAyE,EAAAxE,MAAA,cACExB,QAAQC,IAAI,wDADd+F,EAAAxE,KAAA,EAEyB8D,EAAO7B,MAAM,CAClCA,MAAOgB,EACP3C,UAAW,CAAEmE,MAAOmD,EAAKM,eACzBjE,YAAa,iBALjB,OAAAvC,EAAA8C,EAAAN,KAEUxF,EAFVgD,EAEUhD,KAKRF,QAAQC,IAAI,yCACZoF,EAASnF,EAAKgG,UARhB,wBAAAF,EAAA9D,SAAA4D,EAAA3D,UAFcE,MAAAF,KAAAG,WACdtC,QAAQC,IAAI,sCAWRmJ,IACFpJ,QAAQC,IAAI,2DAbA,WAAAwJ,EAAApH,MAAAF,KAAAG,WAcZ6D,KAED,CAACiD,EAAMxK,EAAM0E,OAEX1E,EAAM0E,KAKT5D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAWC,MAAI,GACbjE,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,QAA3B,wBAEF/C,EAAAC,EAAAC,cAACgE,EAAA,EAAQC,MAAT,KACEnE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASE,QAAM,GACbpE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,KAAK,SAASC,MAAM,QAA5B,gCAAgE/C,EAAAC,EAAAC,cAAA,SAAIwJ,EAAKM,gBACzEhK,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOzB,MAAM,OAAO0B,SAAO,GACzBzE,EAAAC,EAAAC,cAACsE,EAAA,EAAM3B,OAAP,KACE7C,EAAAC,EAAAC,cAACsE,EAAA,EAAME,IAAP,KACE1E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,cACA3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,eACA3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMG,WAAP,oBAGJ3E,EAAAC,EAAAC,cAACsE,EAAA,EAAMI,KAAP,KACGc,EAAM9E,IAAI,SAAAsG,GAAC,OACVlH,EAAAC,EAAAC,cAACsE,EAAA,EAAME,IAAP,CAAWG,IAAKqC,EAAEpG,IAChBd,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAaoC,EAAEC,OACfnH,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAaoC,EAAEE,OAAOnG,MACtBjB,EAAAC,EAAAC,cAACsE,EAAA,EAAMM,KAAP,KAAaoC,EAAEG,oBAzBxB,2OCjEX,IAce4C,EAdMpL,YAAHqL,wJCClB,IASeC,EATItL,YAAHuL,IAMZH,idCPJ,IAqBeI,GArBKxL,YAAHyL,iQCAjB,IAWiBC,GAXH1L,YAAH2L,ySCAX,IAkCezF,GAlCGlG,YAAH4L,gBCaTC,GAAoB,SAACxL,GACzB,OAAGA,EAAM8I,QAELhI,EAAAC,EAAAC,cAAA,OAAKyK,MAAO,CAAE5H,MAAO,QAClB7D,EAAM8I,SAIN,MAgLM4C,GA7KH,WAAM,IAAAzL,EACQC,mBAAS,WADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACT0L,EADSxL,EAAA,GACH8I,EADG9I,EAAA,GAAAK,EAEUN,mBAAS,MAFnBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAET2E,EAFS1E,EAAA,GAEFwJ,EAFExJ,EAAA,GAAA6F,EAGwBpG,mBAAS,MAHjCqG,EAAAnG,OAAAC,EAAA,EAAAD,CAAAkG,EAAA,GAGTsF,EAHSrF,EAAA,GAGKsF,EAHLtF,EAAA,GAIVG,EAASC,cAGfC,oBAAU,WACR,IAAMkF,EAAaC,OAAO7B,aAAa8B,QAAQ,sBAC/C5K,QAAQC,IAAI,cAAeyK,GACxBA,GACD7B,EAAS6B,IAGV,IAEH,IAAMzI,EAAc,SAAC4I,GACnB7K,QAAQC,IAAI,iBAAkB4K,EAAMnD,SACpC+C,EAAgBI,EAAMnD,SAClBmD,EAAMnD,QAAQoD,SAAS,sBACzBC,IAEFC,WAAW,WACTP,EAAgB,OACf,MAGCM,EAAS,WACblC,EAAS,MACTC,aAAamC,QACb3F,EAAO4F,aACPrD,EAAQ,YAGJsD,EAAa,SAACC,EAAKC,GACvBrL,QAAQC,IAAI,iBAAkBmL,EAAKC,GACnCrL,QAAQC,IAAI,eAAgBmL,EAAIE,QAChC,IAAMC,EAASH,EAAI9K,IAAI,SAAAkL,GAErB,OADAxL,QAAQC,IAAI,YAAauL,EAAEhL,IACpBgL,EAAEhL,KAEXR,QAAQC,IAAI,YAAasL,GACzB,IAAME,EAAOF,EAAOT,SAASO,EAAO7K,IAEpC,OADAR,QAAQC,IAAI,YAAawL,GAClBA,GAGH7D,EAAUrE,YAAYwG,GAAa,CACvC2B,OAAQ,SAACC,EAAOC,GAEd5L,QAAQC,IAAI,2BAA4B2L,GACxC,IAAMC,EAAcF,EAAMG,UAAU,CAAErI,MAAOgB,KACvCsH,EAAYH,EAAS1L,KAAK0H,QAChC5H,QAAQC,IAAI,cAAe8L,GACtBZ,EAAWU,EAAY3F,SAAU6F,KACpCF,EAAY3F,SAAS8F,KAAKD,GAC1BzG,EAAO2G,WAAW,CAChBxI,MAAOgB,GACPvE,KAAM2L,QAMRjD,EAAQrF,YAAY0G,IAEpB7J,EAAa8L,YAASzN,GACtByH,EAAWgG,YAASzH,IAE1B,OACE/E,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KACEhE,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CACEC,aAAcvC,EACdwC,mBAAoB,SAAAxL,GAA0B,IACtCkL,EADsClL,EAAvByL,iBACcpM,KAAKqM,UACxC5B,OAAO6B,MAAP,YAAAxE,OAAyB+D,EAAUlF,MAAnC,WACA,IAAM4F,EAAgBnH,EAAOwG,UAAU,CAAErI,MAAOgB,KAChD,IAAK0G,EAAWsB,EAAcvG,SAAU6F,GAAY,CAClD,IAAMW,EAASD,EAAcvG,SAAS8B,OAAO+D,GAC7CU,EAAcvG,SAAWwG,EAEzBpH,EAAO2G,WAAW,CAChBxI,MAAOgB,GACPvE,KAAMuM,IAGV,IAAM3F,EAASiF,EAAUjF,OACnB6F,EAAiBrH,EAAOwG,UAAU,CAAErI,MAAOhF,IAEjD,GAAK0M,EAAWwB,EAAevM,WAAY0G,GASpC,CAEL,IAAM4F,EAASC,EAAevM,WAAWE,IAAI,SAAAX,GAC3C,GAAIA,EAAEa,KAAOsG,EAAOtG,GAAI,CACtB,IAAMoM,EAAI5N,OAAA6N,EAAA,EAAA7N,CAAA,GAAQW,GAElB,OADAiN,EAAKhL,UAAYjC,EAAEiC,UAAY,EACxBgL,EAEP,OAAOjN,IAGXgN,EAAevM,WAAasM,EAE5BpH,EAAO2G,WAAW,CAChBxI,MAAOhF,EACPyB,KAAMyM,QAxB0C,CAClD7F,EAAOlF,UAAY,EACnB,IAAM8K,EAASC,EAAevM,WAAW4H,OAAOlB,GAChD6F,EAAevM,WAAasM,EAE5BpH,EAAO2G,WAAW,CAChBxI,MAAOhF,EACPyB,KAAMyM,OAqBX,kBAAM,OAER5I,EAECrE,EAAAC,EAAAC,cAACkN,GAAA,EAAD,CAAMC,WAAS,GACfrN,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,UAAUb,OAAiB,YAATyK,EAChChE,QAAS,kBAAMsB,EAAQ,cACzBnI,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,QAAQb,OAAiB,UAATyK,EAC9BhE,QAAS,kBAAMsB,EAAQ,YACzBnI,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,WAAWb,OAAiB,QAATyK,EACjChE,QAAS,kBAAMsB,EAAQ,UACzBnI,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,kBAAkBb,OAAiB,oBAATyK,EACxChE,QAAS,kBAAMsB,EAAQ,sBACzBnI,EAAAC,EAAAC,cAACkN,GAAA,EAAKA,KAAN,CAAWG,SAAS,SAClBvN,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,SAASb,QAAQ,EAC/ByG,QAAS,kBAAMwE,SAIlBrL,EAAAC,EAAAC,cAACkN,GAAA,EAAD,CAAMC,WAAS,GACdrN,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,UAAUb,OAAiB,YAATyK,EAChChE,QAAS,kBAAMsB,EAAQ,cACzBnI,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,QAAQb,OAAiB,UAATyK,EAC9BhE,QAAS,kBAAMsB,EAAQ,YACzBnI,EAAAC,EAAAC,cAACkN,GAAA,EAAKA,KAAN,CAAWG,SAAS,SAClBvN,EAAAC,EAAAC,cAACkN,GAAA,EAAKE,KAAN,CAAWrM,KAAK,QACd4F,QAAS,kBAAMsB,EAAQ,cAI/BnI,EAAAC,EAAAC,cAACsN,GAAD,CAAmBxF,QAAS8C,IAC5B9K,EAAAC,EAAAC,cAACuN,EAAD,CAAS3N,OAAQY,EAAY2D,MAAOA,EAAO9B,YAAaA,EACpDqB,KAAe,YAATiH,IAEV7K,EAAAC,EAAAC,cAACwN,EAAD,CAAO5N,OAAQ0G,EACb5C,KAAe,UAATiH,IAEPxG,EACCrE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyN,EAAD,CAASzF,QAASA,EAAS3F,YAAaA,EACtCqB,KAAe,QAATiH,EAAgB1C,QAAS,kBAAMA,EAAQ,YAE/CnI,EAAAC,EAAAC,cAAC0N,EAAD,CAAiBhK,KAAe,oBAATiH,KAEvB7K,EAAAC,EAAAC,cAAC2N,EAAD,CACEjK,KAAe,UAATiH,EACN3B,MAAOA,EACPC,SAAU,SAAC9E,GAAD,OAAW8E,EAAS9E,IAC9B9B,YAAaA,EACb4F,QAAS,kBAAMA,EAAQ,iFC/K3B2F,GAAS,IAAIC,KAAc,CAC/BC,IAAK,2CACLrN,QAAS,CAAEsN,WAAW,KAGlBC,GAAWC,aAAe,CAC9BH,IAAK,+CAGDI,GAAWC,aAAW,SAACvH,EAAD3F,GAAoB,IAAdmN,EAAcnN,EAAdmN,QAC1BjK,EAAQ+E,aAAa8B,QAAQ,sBACnC,MAAO,CACLoD,QAAQhP,OAAA6N,EAAA,EAAA7N,CAAA,GACHgP,EADE,CAELC,cAAelK,EAAK,UAAAiE,OAAajE,GAAU,UAK3CmK,GAAOC,aACX,SAAAjL,GAAe,IAAZO,EAAYP,EAAZO,MAAY2K,EACeC,aAAkB5K,GAAtC6K,EADKF,EACLE,KAAMC,EADDH,EACCG,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,GAE3Cf,GACAM,GAAS9F,OAAO4F,KAGZtI,GAAS,IAAIkJ,KAAa,CAC9BN,QACAO,MAAO,IAAIC,OAGbC,IAASC,OACPlP,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAgB7G,OAAQA,IACtB5F,EAAAC,EAAAC,cAACiP,EAAA,EAAD,CAAqBvJ,OAAQA,IAC5B5F,EAAAC,EAAAC,cAACkP,GAAD,QAGHC,SAASC,eAAe","file":"static/js/main.4359552a.chunk.js","sourcesContent":["import { gql } from 'apollo-boost'\n\nconst UPDATE_AUTHOR_BORN = gql`\n    mutation updateAuthorBirthYear($id: String!, $setBornTo: Int!, $bookCount: Int!) {\n      updateAuthorBirthYear(\n        id: $id,\n        setBornTo: $setBornTo,\n        bookCount: $bookCount\n      ){\n        name\n        born\n        id\n        bookCount\n      }\n    }\n  `\n\n  export default UPDATE_AUTHOR_BORN","import { gql } from 'apollo-boost'\n\nconst ALL_AUTHORS = gql`\nquery allAuthors {\n  allAuthors {\n    name\n    born\n    bookCount\n    id\n  }\n}\n`\n\nexport default ALL_AUTHORS","import React, { useState } from 'react'\nimport Select from 'react-select'\nimport { Form, Header, FormField, Loader, Button } from 'semantic-ui-react'\n\nconst UpdateAuthorForm = (props) => {\n  const [born, setBorn] = useState('')\n  const [selectedOption, setSelectedOption] = useState(null)\n\n  if (props.result.loading) {\n    return (\n      <Loader active inline='centered' />\n    )\n  }\n  console.log('FORM props: ', props.result.data)\n  //muuta value id:ksi\n  const authors = props.result.data.allAuthors\n  const options = authors.map(a => {\n    return { \n     value: a.id.toString(), label: a.name }\n    }\n  )\n\n  const submit = async (e) => {\n    e.preventDefault()\n    console.log('updating author')\n    const int = parseInt(born)\n    console.log('new year: ', int, 'selected: ', selectedOption)\n    const aut = authors.find(a => { \n      return a.id === selectedOption.value \n    })\n    console.log('aut.bookCount: ', aut.bookCount)\n    try {\n      await props.updateBirthYear({\n        variables: { id: selectedOption.value, setBornTo: int, bookCount: aut.bookCount }\n      })\n      setSelectedOption(null)\n      setBorn('')\n    } catch (error) {\n      console.log(error)\n      props.handleError(error)\n    }\n  }\n\n  if (props.result.loading) {\n    return (\n      <Loader active inline='centered' />\n    )\n  }\n\n  return (\n    <div>\n      <Header size='medium' color='teal'>Set birth year</Header>\n      <Form onSubmit={submit}>\n        <FormField fluid='true'>\n          <label>Author</label>\n          <Select \n            value={selectedOption}\n            onChange={(selectedOption) => setSelectedOption(selectedOption)} \n            options={options}\n          />\n        </FormField>\n        <FormField fluid='true'>\n          <label>Born</label>\n          <input type='number' value={born} placeholder='Author birth year' \n            onChange={({ target }) => setBorn(target.value)}/>\n        </FormField>\n        <Button fluid color='teal' type='submit'>Submit</Button>\n      </Form>\n    </div>\n  )\n}\n\nexport default UpdateAuthorForm","import React from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport UPDATE_AUTHOR_BORN from '../graphql/mutations/updateAuthorBorn'\nimport ALL_AUTHORS from '../graphql/queries/allAuthors'\nimport UpdateAuthorForm from './UpdateAuthorForm'\nimport { Container, Header, Segment, Loader, Table } from 'semantic-ui-react'\n\nconst Authors = (props) => {\n  console.log('Authors props: ', props)\n\n  if (!props.show) {\n    return null\n  }\n\n  if (props.result.loading) {\n    return (\n      <Loader active inline='centered' />\n    )\n  }\n\n  const updateBirthYear = useMutation(UPDATE_AUTHOR_BORN, {\n    refetchQueries: [{ query: ALL_AUTHORS }]\n  })\n\n  const authors = props.result.data.allAuthors\n  return (\n    <Container text>\n      <Segment.Group>\n        <Segment padded>\n          <Header size='large' color='teal'>Authors</Header>\n        </Segment>\n        <Segment.Group>\n          {props.token     \n          ? <Segment padded stacked>\n              <UpdateAuthorForm result={props.result} updateBirthYear={updateBirthYear}\n                handleError={props.handleError}\n              />\n            </Segment>\n          : <div/>\n          }\n          <Segment padded>\n            <Table color='teal' compact>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>Name</Table.HeaderCell>\n                  <Table.HeaderCell>Born</Table.HeaderCell>\n                  <Table.HeaderCell>Nr. of books</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {authors.map(a =>\n                  <Table.Row key={a.name}>\n                    <Table.Cell>{a.name}</Table.Cell>\n                    <Table.Cell>{a.born}</Table.Cell>\n                    <Table.Cell>{a.bookCount}</Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n          </Segment>\n        </Segment.Group>\n      </Segment.Group>\n    </Container>\n  )\n}\n\nexport default Authors","import React, { useState, useEffect } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport { Container, Header, Table, Label, Segment } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport '../index.css'\n\nconst ALL_BOOKS = gql`\n    query allBooks($author: String, $genre: String) {\n      allBooks(author: $author, genre: $genre) {\n        title\n        author {\n          name\n          born\n          id\n        }\n        genres\n        published\n        id\n      }\n    }\n  `\n\nconst ALL_GENRES = gql`\n    query allGenres {\n      allGenres\n    }\n  `\n\nconst Books = (props) => {\n  const [selectedGenre, setselectedGenre] = useState('')\n  const [genres, setGenres] = useState([])\n  const [books, setBooks] = useState([])\n  const client = useApolloClient()\n\n  console.log('Books props: ', props)\n\n  //useEffect to fetch all available genres\n  useEffect(() => {\n    console.log('Booklist useEffect 1 called')\n    const fetchGenres = async () => {\n      console.log('Booklist useEffect 1: fetching available genres')\n      const { data } = await client.query({\n        query: ALL_GENRES,\n        fetchPolicy: 'network-only'\n      })\n      console.log('Booklist useEffect 1: setGenres')\n      setGenres(data.allGenres)\n    }\n    fetchGenres()\n  }, [books])\n\n  //useEffect to fetch all books by selected genre\n  useEffect(() => {\n    console.log('Booklist useEffect 2 called ')\n    const fetchBooks = async () => {\n      console.log('Booklist useEffect 2: books by selected genre ', selectedGenre)\n      const { data } = await client.query({\n        query: ALL_BOOKS,\n        variables: { genre: selectedGenre },\n        fetchPolicy: 'network-only'\n      })\n      console.log('Booklist useEffect 2: setBooks')\n      setBooks(data.allBooks)\n    }\n    fetchBooks()\n  }, [selectedGenre, props.show])\n\n  if (!props.show) {\n    return null\n  }\n\n  const renderGenre = (genre) => {\n    let color = ''\n    if (selectedGenre === genre) {\n      color = 'teal'\n    }\n    return (\n      <Label key={genre} as='a' color={color} compact='true' size='small'\n        onClick={() => setselectedGenre(genre)} >\n        {genre === '' \n          ? 'Show all'\n          : _.capitalize(genre)\n          }\n      </Label>\n    )\n  }\n\n  const renderSubheader = () => { \n    return (\n      <div>\n        {selectedGenre === ''\n        ? 'Filter by genre'\n        : <div>Books in genre <i>{selectedGenre}</i></div>\n        }\n      </div>\n    )\n  }\n\n  const renderFilters = () => {\n    return (\n      <div>\n      <Header size='medium' color='teal' >\n        {renderSubheader()}\n      </Header>\n      {genres !== [] ?\n        <div className='genre filters'>\n          <Label.Group>\n            {renderGenre('')}\n          </Label.Group>\n          <Label.Group>\n            {genres.map(g => renderGenre(g))}\n          </Label.Group> \n        </div>\n      : <div/> }\n      </div>\n    )\n  }\n\n  return (\n    <Container text>\n      <Segment.Group>\n        <Segment padded>\n          <Header size='large' color='teal'>Books</Header>\n        </Segment>\n        <Segment.Group>\n          <Segment padded className='books list section break'>\n            {renderFilters()}\n          </Segment>\n          <Segment padded>\n            <Table color='teal' compact>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>Title</Table.HeaderCell>\n                  <Table.HeaderCell>Author</Table.HeaderCell>\n                  <Table.HeaderCell>Published</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {books.map(b =>\n                  <Table.Row key={b.id}>\n                    <Table.Cell>{b.title}</Table.Cell>\n                    <Table.Cell>{b.author.name}</Table.Cell>\n                    <Table.Cell>{b.published}</Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n            </Segment>\n          </Segment.Group>\n      </Segment.Group>\n    </Container>\n  )\n}\n\nexport default Books","import React, { useState } from 'react'\nimport { Container, Header, Button, Form, \n  FormField, Label, Icon, Segment } from 'semantic-ui-react'\nimport _ from 'lodash'\n\nconst NewBook = (props) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\n  if (!props.show) {\n    return null\n  }\n\n  const submit = async (e) => {\n    e.preventDefault()\n    console.log('add book...')\n    console.log(title, published, author, genres)\n\n    if (!title) {\n      props.handleError({ message: 'Book must have a title'})\n      return\n    }\n    if (!author) {\n      props.handleError({ message: 'Book must have an author'})\n      return\n    }\n    if (!published) {\n      props.handleError({ message: 'Book must have a publishing year'})\n      return\n    }\n\n    const publInt = parseInt(published)\n    console.log('pubInt', publInt)\n    try {\n      await props.addBook({\n        variables: { title: title, published: publInt, \n          author: author, genres: genres }\n      })\n    } catch (error) {\n      console.log(error)\n      props.handleError(error)\n    }\n    setTitle('')\n    setPublished('')\n    setAuthor('')\n    setGenres([])\n    setGenre('')\n    console.log('setting page')\n    props.setPage()\n  }\n\n  const addGenre = () => {\n    const newGenres = genres.concat(genre)\n    console.log('newGenres: ', newGenres)\n    setGenres([...newGenres])\n    setGenre('')\n  }\n\n  const removeGenre = (genre) => {\n    console.log('removing genre ', genre)\n    const newArray = genres.filter(g => g !== genre)\n    setGenres(newArray)\n    setGenre('')\n    console.log('genres after removal ', newArray)\n  }\n\n  return (\n    <Container text>\n      <Segment.Group>\n        <Segment padded>\n          <Header size='large' color='teal'>Give book details</Header>\n        </Segment>\n        <Segment.Group>\n          <Segment padded stacked>\n            <Form onSubmit={submit}>\n              <FormField fluid='true'>\n                <label>Title</label>\n                <input type='text' value={title} placeholder='Title of book' \n                  onChange={({ target }) => setTitle(target.value)}/>\n              </FormField>\n              <FormField fluid='true'>\n                <label>Author</label>\n                <input type='text' value={author} placeholder='Author of book' \n                  onChange={({ target }) => setAuthor(target.value)}/>\n              </FormField> \n              <FormField fluid='true'>\n                <label>Published</label>\n                <input type='number' value={published} placeholder='Publishing year of book' \n                  onChange={({ target }) => setPublished(target.value)}/>\n              </FormField>\n              <FormField fluid='true'>\n                <label>Genre</label>\n                <Form.Group inline>\n                  <FormField fluid='true'>\n                    <input type='text' value={genre} placeholder='Genre of book' \n                      onChange={({ target }) => setGenre(target.value)}/>\n                  </FormField>\n                  <Button onClick={addGenre} size='small' type='button'>add genre</Button>\n                </Form.Group>\n                <Label.Group color='teal'>\n                  <div className='genres to add'>\n                    {genres.map(g => (\n                      <Label key={g} as='a' onClick={() => removeGenre(g)} size='large'>\n                        {_.capitalize(g)}\n                        <Icon name='close'/>\n                      </Label>\n                    ))}\n                  </div>\n                </Label.Group>\n              </FormField>\n              <Button fluid color='teal' type='submit'>Submit</Button>\n            </Form>\n      </Segment>\n      </Segment.Group>\n      </Segment.Group>\n    </Container>\n  )\n}\n\nexport default NewBook","import React, { useState } from 'react'\nimport { Container, Header, Segment, Form, FormField, Button } from 'semantic-ui-react'\n\nconst LoginForm = (props) => {\n  const [username, setUsername] = useState('')\n  const [password, setpassword] = useState('')\n\n  if (!props.show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n    try {\n      const result = await props.login({\n        variables: { username, password }\n      })\n      const token = result.data.login.value\n\n      props.setToken(token)\n      localStorage.setItem('library-user-token', token)\n      props.setPage()\n    } catch (error) {\n      props.handleError(error)\n    }\n  }\n\n  return (\n    <Container text>\n      <Segment.Group>\n        <Segment padded>\n          <Header size='large' color='teal'>Login here</Header>\n        </Segment>\n        <Segment.Group>\n          <Segment padded stacked>\n            <Form onSubmit={submit}>\n              <FormField fluid='true'>\n                <label>Username</label>\n                <input type='text' value={username} placeholder='Your username' \n                  onChange={({ target }) => setUsername(target.value)}/>\n              </FormField>\n              <FormField fluid='true'>\n                <label>Password</label>\n                <input type='password' value={password} placeholder='Your password' \n                  onChange={({ target }) => setpassword(target.value)}/>\n              </FormField>\n              <Button fluid color='teal' type='submit'>Login</Button>\n            </Form>\n          </Segment>\n        </Segment.Group>\n      </Segment.Group>\n    </Container>\n  )\n}\n\nexport default LoginForm","import React, { useState, useEffect } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport { Container, Header, Table, Segment } from 'semantic-ui-react'\n\nconst ALL_BOOKS = gql`\n    query allBooks($author: String, $genre: String) {\n      allBooks(author: $author, genre: $genre) {\n        title\n        author {\n          name\n          born\n          id\n        }\n        genres\n        published\n        id\n      }\n    }\n  `\n\nconst USER = gql`\n  query me {\n    me {\n      username\n      favoriteGenre\n    }\n  }\n`\n\nconst Recommendations = (props) => {\n  const [books, setBooks] = useState([])\n  const client = useApolloClient()\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    console.log('Recommendations useEffect 1 called')\n    async function fetchUser() {\n      console.log('Recommendations useEffect 1: fetching user')\n      const { data } = await client.query({\n        query: USER\n      })\n      console.log('Recommendations useEffect 1: setUser')\n      setUser(data.me)\n    }\n    fetchUser()\n  }, [])\n\n  useEffect(() => {\n    console.log('Recommendations useEffect 2 called')\n    async function fetchBooks() {\n      console.log('Recommendations useEffect 2: fetching books by genre')\n      const { data } = await client.query({\n        query: ALL_BOOKS,\n        variables: { genre: user.favoriteGenre },\n        fetchPolicy: 'network-only'\n      })\n      console.log('Recommendations useEffect 2: setBooks')\n      setBooks(data.allBooks)\n    }\n    if (user) {\n      console.log('Recommendations useEffect 2: user exists -> fetch books')\n      fetchBooks()\n    }\n  }, [user, props.show])\n\n  if (!props.show) {\n    return null\n  }\n\n  return (\n    <Container text>\n      <Segment.Group>\n        <Segment padded>\n          <Header size='large' color='teal'>Recommended for you</Header>\n        </Segment>\n        <Segment.Group>\n          <Segment padded>\n            <Header size='medium' color='teal'>Books in your favorite genre <i>{user.favoriteGenre}</i></Header>\n            <Table color='teal' compact>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>Title</Table.HeaderCell>\n                  <Table.HeaderCell>Author</Table.HeaderCell>\n                  <Table.HeaderCell>Published</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {books.map(b =>\n                  <Table.Row key={b.id}>\n                    <Table.Cell>{b.title}</Table.Cell>\n                    <Table.Cell>{b.author.name}</Table.Cell>\n                    <Table.Cell>{b.published}</Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n          </Segment>\n        </Segment.Group>\n      </Segment.Group>\n    </Container>\n  )\n}\n\nexport default Recommendations","import { gql } from 'apollo-boost'\n\nconst BOOK_DETAILS = gql`\n  fragment BookDetails on Book {\n    id\n    title\n    author {\n      name\n      born\n      id\n    }\n    published\n    genres\n  }\n`\n\nexport default BOOK_DETAILS","import { gql } from 'apollo-boost'\nimport BOOK_DETAILS from '../fragments/bookDetails'\n\nconst BOOK_ADDED = gql`\n  subscription {\n    bookAdded {\n      ...BookDetails\n    }\n  }\n  ${BOOK_DETAILS}\n`\n\nexport default BOOK_ADDED","import { gql } from 'apollo-boost'\n\nconst CREATE_BOOK = gql`\n    mutation createBook($title: String!, $published: Int!, $author: String!, $genres: [String!]!) {\n      addBook(\n        title: $title,\n        published: $published,\n        author: $author,\n        genres: $genres\n      ){\n        title\n        published\n        genres\n        id\n        author {\n          name\n          born\n          id\n        }\n      }\n    }\n  `\n\nexport default CREATE_BOOK","import { gql } from 'apollo-boost'\n\nconst LOGIN = gql`\n    mutation login($username: String!, $password: String!) {\n      login(\n        username: $username,\n        password: $password\n      ){\n        value\n      }\n    }\n  `\n\n  export default LOGIN","import { gql } from 'apollo-boost'\n\nconst ALL_BOOKS = gql`\n query allBooks($author: String, $genre: String) {\n  allBooks(author: $author, genre: $genre) {\n     title\n     author {\n       name\n       born\n       id\n     }\n     genres\n     published\n     id\n   }\n }\n`\n\n\n    /*\n const ALL_BOOKS = gql`\n query allBooksByGenre {\n   allBooks {\n     title\n     author {\n       name\n       born\n       id\n     }\n     genres\n     published\n     id\n   }\n }\n`\n*/\nexport default ALL_BOOKS","import React, { useState, useEffect } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport LoginForm from './components/LoginForm'\nimport Recommendations from './components/Recommendations'\nimport { useQuery, useMutation, useApolloClient } from 'react-apollo-hooks'\nimport { Subscription } from 'react-apollo'\nimport BOOK_ADDED from './graphql/subscriptions/bookAdded'\nimport CREATE_BOOK from './graphql/mutations/createBook'\nimport LOGIN from './graphql/mutations/login'\nimport ALL_BOOKS from './graphql/queries/allBooks'\nimport ALL_AUTHORS from './graphql/queries/allAuthors'\nimport { Container, Menu } from 'semantic-ui-react'\n\nconst ErrorNotification = (props) => { \n  if(props.message) {\n    return (\n      <div style={{ color: 'red' }}>\n        {props.message}\n      </div> \n    )\n  }\n  return null\n}\n\nconst App = () => {\n  const [page, setPage] = useState('authors')\n  const [token, setToken] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const client = useApolloClient()\n  \n  //Initializing logged in user\n  useEffect(() => {\n    const loggedUser = window.localStorage.getItem('library-user-token')\n    console.log('logged user', loggedUser)\n    if(loggedUser) {\n      setToken(loggedUser)\n      //setToken(loggedUser.token)\n    }\n  }, [])\n\n  const handleError = (error) => {\n    console.log('handling error', error.message)\n    setErrorMessage(error.message)\n    if (error.message.includes('not authenticated')) {\n      logout()\n    }\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  }\n\n  const logout = () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n    setPage('authors')\n  }\n\n  const includedIn = (set, object) => {\n    console.log('included in?: ', set, object)\n    console.log('set length: ', set.length)\n    const setIds = set.map(p => {\n      console.log('mapissa: ', p.id)\n      return p.id\n    })\n    console.log('set ids: ', setIds)\n    const bool = setIds.includes(object.id)\n    console.log('boolean: ', bool)\n    return bool\n  }\n\n  const addBook = useMutation(CREATE_BOOK, {\n    update: (store, response) => {\n      //After book add, add it to the store if not already there\n      console.log('addBok update response: ', response)\n      const dataInStore = store.readQuery({ query: ALL_BOOKS })\n      const addedBook = response.data.addBook\n      console.log('addedBook: ', addedBook)\n      if (!includedIn(dataInStore.allBooks, addedBook)) {\n        dataInStore.allBooks.push(addedBook)\n        client.writeQuery({\n          query: ALL_BOOKS,\n          data: dataInStore\n        })\n      }\n    }\n  })\n\n  const login = useMutation(LOGIN)\n\n  const allAuthors = useQuery(ALL_AUTHORS)\n  const allBooks = useQuery(ALL_BOOKS)\n\n  return (\n    <Container>\n      <Subscription\n        subscription={BOOK_ADDED}\n        onSubscriptionData={({ subscriptionData }) => {\n          const addedBook = subscriptionData.data.bookAdded\n          window.alert(`New book ${addedBook.title} added`)\n          const boooksInStore = client.readQuery({ query: ALL_BOOKS })\n          if (!includedIn(boooksInStore.allBooks, addedBook)) {\n            const newSet = boooksInStore.allBooks.concat(addedBook)\n            boooksInStore.allBooks = newSet\n            //console.log('new book data going to store ', boooksInStore)\n            client.writeQuery({\n              query: ALL_BOOKS,\n              data: boooksInStore\n            })\n          }\n          const author = addedBook.author\n          const authorsInStore = client.readQuery({ query: ALL_AUTHORS })\n          //Add author to store if not there already\n          if (!includedIn(authorsInStore.allAuthors, author)) {\n            author.bookCount = 1\n            const newSet = authorsInStore.allAuthors.concat(author)\n            authorsInStore.allAuthors = newSet\n            //console.log('author not in store -> writing', authorsInStore)\n            client.writeQuery({\n              query: ALL_AUTHORS,\n              data: authorsInStore\n            })\n          } else {\n            //Update author's book count\n            const newSet = authorsInStore.allAuthors.map(a => {\n              if (a.id === author.id) {\n                const temp = { ...a }\n                temp.bookCount = a.bookCount + 1\n                return temp   \n              } else {\n                return a\n              }\n            })\n            authorsInStore.allAuthors = newSet\n            //console.log('writing to store, new set', authorsInStore)\n            client.writeQuery({\n              query: ALL_AUTHORS,\n              data: authorsInStore\n            })\n          }\n        }}>\n        {() => null}\n        </Subscription>\n      {token     \n      ? \n        <Menu secondary>\n        <Menu.Item name='authors' active={page === 'authors'} \n          onClick={() => setPage('authors')}/>\n        <Menu.Item name='books' active={page === 'books'} \n          onClick={() => setPage('books')}/>\n        <Menu.Item name='add book' active={page === 'add'} \n          onClick={() => setPage('add')}/>\n        <Menu.Item name='recommendations' active={page === 'recommendations'} \n          onClick={() => setPage('recommendations')}/>\n        <Menu.Menu position='right'>\n          <Menu.Item name='logout' active={false}\n            onClick={() => logout()}/>\n        </Menu.Menu>\n        </Menu>\n\n      :  <Menu secondary>\n          <Menu.Item name='authors' active={page === 'authors'} \n            onClick={() => setPage('authors')}/>\n          <Menu.Item name='books' active={page === 'books'} \n            onClick={() => setPage('books')}/>\n          <Menu.Menu position='right'>\n            <Menu.Item name='login'\n              onClick={() => setPage('login')}/>\n          </Menu.Menu>\n        </Menu>\n      }\n      <ErrorNotification message={errorMessage}/>\n      <Authors result={allAuthors} token={token} handleError={handleError}\n          show={page === 'authors'}\n      />\n      <Books result={allBooks}\n        show={page === 'books'}\n      />\n      {token     \n      ? <div>\n        <NewBook addBook={addBook} handleError={handleError}\n          show={page === 'add'} setPage={() => setPage('books')}\n        />\n        <Recommendations show={page === 'recommendations'}/></div>\n      :\n        <LoginForm \n          show={page === 'login'}\n          login={login}\n          setToken={(token) => setToken(token)}\n          handleError={handleError}\n          setPage={() => setPage('authors')}\n        />\n      }\n    </Container>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks'\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n\n//'https://tranquil-river-73855.herokuapp.com/graphql'\n//'ws://localhost:4000/graphql'\n//'http://localhost:4000/graphql'\n\nconst wsLink = new WebSocketLink({\n  uri: 'wss://tranquil-river-73855.herokuapp.com',\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: 'https://tranquil-river-73855.herokuapp.com'\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('library-user-token')\n  return {\n    headers: { \n      ...headers, \n      authorization: token ? `bearer ${token}` : null \n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n     <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>, \n  document.getElementById('root'))"],"sourceRoot":""}